# github dorking 
# this is a simpe python script created to automate process of github dorking.

from tqdm import tqdm
import requests
import sys
import os
import re

def get_user_input():

    def prompt_user():
        print("At least one argument is required.")
        print("With default word list")
        print("Ex. github_dorking.py tesla.com")
        print("or")
        print("With custom wordlist")
        print("Ex. github_dorking.py tesla.com path/to/dorks.txt")
        sys.exit(1)

    # This condition ensures that the script requires at least 1 argument (other than the script name itself)
    # and allows for a maximum of 2 additional arguments.
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        prompt_user()

    # list for storing search strings
    search_strings = []

    if len(sys.argv) == 2:
        query1 = sys.argv[1]

        # read dorks from dorks.txt (default file for dorks)
        dork_file = "dorks.txt"

        # Get the directory path of the current script
        script_dir = os.path.dirname(os.path.realpath(__file__))

        # Construct the absolute path to the file
        absolute_file_path = os.path.join(script_dir, dork_file)
        
        try:
            with open(absolute_file_path,"r") as file:
                for dorks in file:
                    dork = dorks.strip()
                    search_string = f"{query1} {dork}"
                    search_strings.append(search_string)
        except FileNotFoundError:
            print('File not found "dorks.txt"')
        except Exception as e:
            print(f"Error while reading file: {e}")
        

    if len(sys.argv) == 3:
        query1 = sys.argv[1]
        file_path = sys.argv[2]

        # Check if the argument contains a valid file path
        if os.path.exists(file_path):
            # Define the regular expression pattern
            pattern = r'\.txt$'
            # Check if the variable contains a .txt file path
            if re.search(pattern, file_path):
                print("valid txt file")
                try:
                    with open(file_path,"r") as file:
                        for dorks in file:
                            dork = dorks.strip()
                            search_string = f"{query1} {dork}"
                            search_strings.append(search_string)
                except FileNotFoundError:
                    print("File not found")
                except Exception as e:
                    print(f"Error while reading file: {e}")
            else:
                print("Invalid file")
                print("Only .txt files are allowed Ex. path/to/file.txt")
        else:
            print("File does not exist")
    return search_strings


class github_dorking:
    def __init__(self,strings):
        self.search_strings = strings
        # total count of dorks
        self.count = len(search_strings)

    def start_dorking(self):
       # Create tqdm progress bar
    #    progress_bar = tqdm(total=self.count, desc="Progress", position=0, leave=False)

       for search_string in self.search_strings:
            # print(search_string)
            url = f"https://api.github.com/search/code?q={search_string}"
            headers = {
            'Authorization': 'Token personal_access_token'
            }
            response = requests.get(url, headers=headers)
            data = response.json()
            try:
            # Check if request was successful
                if response.status_code == 200:
                    items = data['items']
                    url_count = len(items)
                    print(f"Total count of results: {url_count} for \"{search_string}\"")
                    print("Results:")
                    for item in items:
                        url = item['html_url']
                        print(f"URL: {url}")
                else:
                    print(f"Request failed with status code: {response.status_code}")
            except Exception as e:
                print(f"Error: {e}")

search_strings = get_user_input()
dorking = github_dorking(search_strings)
dorking.start_dorking()
import argparse
import re
import os


def is_js_file(url, jsurls):
    pattern = r'\.(js|json|jsx|ts|tsx)(?:$|\?|\&|\#)'
    if re.search(pattern, url):
        print(f"[+] {url}")
        jsurls.append(url)
    
        # find_hardcoded_credentials(url)

def is_img(url, imgurls):
    pattern = r'\.(jpg|jpeg|png|gif|bmp|svg|ico)(?:$|/|\?|\&|\#)'
    if re.search(pattern, url):
        print(f"[+] {url}")
        imgurls.append(url)
    

def is_css(url, cssurls):
    pattern = r'\.(css)(?:$|\?|\&|\#)'
    if re.search(pattern, url):
        print(f"[+] {url}")
        cssurls.append(url)
    

def is_other(url, otherurls):
    # Patterns for JavaScript, image, and CSS files
    js_pattern = r'\.(js|json|jsx|ts|tsx)(?:$|\?|\&|\#)'
    img_pattern = r'\.(jpg|jpeg|png|gif|bmp|svg|ico)(?:$|/|\?|\&|\#)'
    css_pattern = r'\.(css)(?:$|\?|\&|\#)'

    # Check if the URL matches none of the patterns
    if not (re.search(js_pattern, url) or re.search(img_pattern, url) or re.search(css_pattern, url)):
        otherurls.append(url)

# Check if the user input is a valid file.
def is_valid_file_path(file_path):
    jsurls = []
    imgurls = []
    cssurls = []
    otherurls = []

    if os.path.isfile(file_path) and file_path.lower().endswith('.txt'):
        try:
            with open(file_path, "r") as f:
                for url in f:
                    url = url.strip()  # Remove any leading/trailing whitespace or newline characters
                    if is_valid_url(url):
                        is_js_file(url, jsurls)
                        is_img(url,imgurls)
                        is_css(url,cssurls)
                        is_other(url,otherurls)

            # Write URLs containing .js files to js.txt
            with open("js.txt", "a") as f:
                for u in jsurls:
                    f.write(u + '\n')
            with open("img.txt", "a") as f:
                for u in imgurls:
                    f.write(u + '\n')
            with open("css.txt", "a") as f:
                for u in cssurls:
                    f.write(u + '\n')
            with open("others.txt", "a") as f:
                for u in otherurls:
                    f.write(u + '\n')
        except FileNotFoundError:
            print("File not found")
    else:
        print("File path or extension is not valid")
        print("Only .txt file is acceptable")

# Check if the user input is a valid URL.
def is_valid_url(url):
    # Regular expression pattern to match URLs
    url_pattern = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or IP
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if re.search(url_pattern, url):
        return True
    else:
        print("Invalid URL:", url)
        return False

# get input from user and validate
def get_user_input():
    parser = argparse.ArgumentParser(description='Process user input based on parameters -u and -f')
    parser.add_argument('-f', '--file', type=str, help='Specify file name')
    args = parser.parse_args()

    if args.file:
        is_valid_file_path(args.file)

get_user_input()

import argparse
import requests
import re
import os

# exploiting cors
# def exploiting_cors(cors):
#     pass

# detect cors headers
def cors(valid_url):
    try:
        response = requests.get(valid_url)
        # if response.status_code == 405:
        #     response = requests.get(valid_url)
        if response.status_code == 200:
            print(f"[+] url: {valid_url}")
            Access_Control_Allow_Origin = response.headers.get('Access-Control-Allow-Origin')
            Access_Control_Allow_Credentials = response.headers.get('Access-Control-Allow-Credentials')
            if Access_Control_Allow_Origin and Access_Control_Allow_Credentials:
                print(f"[+] Access-Control-Allow-Origin: {Access_Control_Allow_Origin}")
                print(f"[+] Access-Control-Allow-Credentials: {Access_Control_Allow_Credentials}")
                print("")
            else:
                print("[-] CORS headers are not present in the response.")
                print("")
        else:
            print(f"[-] url: {valid_url}")
            print(f"Error {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

# Check if the user input is a valid URL.
def is_valid_url(url):
    # Regular expression pattern to match URLs
    url_pattern = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or IP
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if re.match(url_pattern, url):
        return True
    else:
        print("Invalid url")
        return False

# Check if the user input is a valid file.
def is_valid_file_path(file_path):
    if os.path.isfile(file_path) and file_path.lower().endswith('.txt'):
        try:
            with open(file_path,"r") as f:
                for url in f:
                    url = url.strip()  # Remove any leading/trailing whitespace or newline characters
                    if is_valid_url(url):
                        cors(url)
        except FileNotFoundError:
            print("File not found")
    else:
        print("File path or extention is not valid")
        print("Only .txt file is acceptable")

# get input from user and validate
def get_user_input():
    parser = argparse.ArgumentParser(description='Process user input based on parameters -u and -f')
    parser.add_argument('-u', '--url', type=str, help='Specify url')
    parser.add_argument('-f', '--file', type=str, help='Specify file name')
    args = parser.parse_args()

    if args.url and args.file:
        print("Too many arguments")
        print("Only one argument at a time accepted")
        exit()

    if args.url:
        # print("url:", args.url)
        if is_valid_url(args.url):
            cors(args.url)

    if args.file:
        # print("file name:", args.file)
        is_valid_file_path(args.file)


get_user_input()
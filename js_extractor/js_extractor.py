from bs4 import BeautifulSoup
import argparse
import requests
import re
import os


def find_hardcoded_credentials(url):
    secret_keys= ["username","password","credentials","secret","token","api_key","access_key","auth_key","client_secret","db_password","db_username","auth_token","auth_password","login","key","pass","account","email","user","pwd","auth","bearer","basic","session","jwt","client_id","client_secret","oauth","token","api_token","private_key","public_key","api_key","consumer_key","oauth_token","oauth_token_secret","aws_access_key_id","aws_secret_access_key","azure_storage_account","azure_storage_access_key","gcp_credentials","mysql_password","mysql_username","mongodb_password","mongodb_username","pg_password","pg_username","db_pass","db_user","admin_password"]
    try:
        response = requests.get(url)
        if response.status_code == 200:
            # Convert the raw JavaScript content into a string
            js_string = response.text

            # Check for each secret key in the JavaScript content
            for key in secret_keys:
                if key in js_string:
                    print(f"Potential hardcoded credential found: {key}")

            # Regular expression pattern to extract URLs
            url_pattern = r'(https?://\S+)'
            urls = re.findall(url_pattern, js_string)
            
            # Print the extracted URLs
            if urls:
                print("\nExtracted URLs:")
                for url in urls:
                    if is_valid_url(url):
                        print(url)

            # Regular expression pattern to extract endpoints
            endpoint_pattern = r'wp\.ajax\.settings\.url\s*=\s*(["\'])(.*?)\1'

            # Find all endpoints in the JavaScript content
            endpoints = re.findall(endpoint_pattern, js_string)

            # Print the extracted endpoints
            if endpoints:
                print("\nExtracted Endpoints:")
                for endpoint in endpoints:
                    print(endpoint[1])
        else:
            print(f"Error {response.status_code}")
    except Exception as e:
        print(f"Error {e}")

def is_js_file(url, urls):
    pattern = r'\.js(?:$|\?|\&|\#)'
    if re.search(pattern, url):
        print(f"[+] {url}")
        urls.append(url)
        find_hardcoded_credentials(url)

# Check if the user input is a valid file.
def is_valid_file_path(file_path):
    urls = []
    if os.path.isfile(file_path) and file_path.lower().endswith('.txt'):
        try:
            with open(file_path, "r") as f:
                for url in f:
                    url = url.strip()  # Remove any leading/trailing whitespace or newline characters
                    if is_valid_url(url):
                        is_js_file(url, urls)
            # Write URLs containing .js files to js.txt
            with open("js.txt", "a") as f:
                for u in urls:
                    f.write(u + '\n')
        except FileNotFoundError:
            print("File not found")
    else:
        print("File path or extension is not valid")
        print("Only .txt file is acceptable")

# Check if the user input is a valid URL.
def is_valid_url(url):
    # Regular expression pattern to match URLs
    url_pattern = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or IP
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if re.search(url_pattern, url):
        return True
    else:
        print("Invalid URL:", url)
        return False

# get input from user and validate
def get_user_input():
    parser = argparse.ArgumentParser(description='Process user input based on parameters -u and -f')
    parser.add_argument('-f', '--file', type=str, help='Specify file name')
    args = parser.parse_args()

    if args.file:
        is_valid_file_path(args.file)

get_user_input()

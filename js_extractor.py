from bs4 import BeautifulSoup
import argparse
import requests
import re
import os
from termcolor import colored

def find_hardcoded_credentials(url):
    secret_keys = [
        "username", "password", "credentials", "secret", "token", "api_key", 
        "access_key", "auth_key", "client_secret", "db_password", "db_username", 
        "auth_token", "auth_password", "login", "key", "pass", "account", 
        "email", "user", "pwd", "auth", "bearer", "basic", "session", 
        "jwt", "client_id", "client_secret", "oauth", "token", "api_token", 
        "private_key", "public_key", "api_key", "consumer_key", "oauth_token", 
        "oauth_token_secret", "aws_access_key_id", "aws_secret_access_key", 
        "azure_storage_account", "azure_storage_access_key", "gcp_credentials", 
        "mysql_password", "mysql_username", "mongodb_password", "mongodb_username", 
        "pg_password", "pg_username", "db_pass", "db_user", "admin_password"
    ]
    try:
        response = requests.get(url)
        if response.status_code == 200:
            js_string = response.text

            for key in secret_keys:
                if key in js_string:
                    print(colored(f"Potential hardcoded credential found: {key}", 'red'))

            url_pattern = r'(https?://\S+?)["\)]'
            urls = re.findall(url_pattern, js_string)

            if urls:
                print(colored("\nExtracted URLs:", 'blue'))
                for url in urls:
                    if is_valid_url(url):
                        print(colored(url, 'green'))

            endpoint_pattern = r'wp\.ajax\.settings\.url\s*=\s*(["\'])(.*?)\1'
            endpoints = re.findall(endpoint_pattern, js_string)

            if endpoints:
                print(colored("\nExtracted Endpoints:", 'blue'))
                for endpoint in endpoints:
                    print(colored(endpoint[1], 'green'))
        else:
            print(colored(f"Error {response.status_code}", 'yellow'))
    except Exception as e:
        print(colored(f"Error {e}", 'yellow'))

def is_js_file(url, urls):
    pattern = r'\.js(?:$|\?|\&|\#)'
    if re.search(pattern, url):
        print(colored(f"[+] {url}", 'cyan'))
        urls.append(url)
        find_hardcoded_credentials(url)

def is_valid_file_path(file_path):
    urls = []
    if os.path.isfile(file_path) and file_path.lower().endswith('.txt'):
        try:
            with open(file_path, "r") as f:
                for url in f:
                    url = url.strip()
                    if is_valid_url(url):
                        is_js_file(url, urls)
            with open("js.txt", "a") as f:
                for u in urls:
                    f.write(u + '\n')
        except FileNotFoundError:
            print(colored("File not found", 'yellow'))
    else:
        print(colored("File path or extension is not valid. Only .txt file is acceptable", 'yellow'))

def is_valid_url(url):
    url_pattern = re.compile(
        r'^(?:http|ftp)s?://'  
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  
        r'localhost|'  
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  
        r'(?::\d+)?'  
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if re.search(url_pattern, url):
        return True
    else:
        print(colored("Invalid URL:", 'yellow'), url)
        return False

def get_user_input():
    parser = argparse.ArgumentParser(description='Process user input based on parameters -u and -f')
    parser.add_argument('-f', '--file', type=str, help='Specify file name')
    args = parser.parse_args()

    if args.file:
        is_valid_file_path(args.file)

get_user_input()
